include(CheckSymbolExists)

option(USE_WARNINGS_AS_ERROR "Use warnings as error" OFF)
option(USE_NO_UNUSED_PARAMETER "Check for unused variables and functions" OFF)

if(CORE_SYSTEM_NAME STREQUAL windows OR CORE_SYSTEM_NAME STREQUAL windowsstore)
  check_symbol_exists(_X86_ "Windows.h" _X86_)
  check_symbol_exists(_AMD64_ "Windows.h" _AMD64_)
  check_symbol_exists(_ARM_ "Windows.h" _ARM_)
  check_symbol_exists(_ARM64_ "Windows.h" _ARM64_)

  if(_X86_)
    set(TARGET_CPU "x86")
  elseif(_AMD64_)
    set(TARGET_CPU "x64")
  elseif(_ARM_)
    set(TARGET_CPU "ARM")
  elseif(_ARM64_)
    set(TARGET_CPU "ARM64")
  else()
    message(FATAL_ERROR "Unsupported architecture")
  endif()

  set(MATH_OPTIMIZATION "avx2" CACHE STRING "Select Windows performance optimization, possible values are \"avx\", \"avx2\", \"avx512\" or  \"sse2\" (Default is: \"avx2\"")
  message(STATUS "Using compile optimization for Windows")

  if(TARGET_CPU STREQUAL "x64")
    if(MATH_OPTIMIZATION STREQUAL "avx")
      set(COMPILER_FLAGS "/arch:AVX")
    elseif(MATH_OPTIMIZATION STREQUAL "avx2")
      set(COMPILER_FLAGS "/arch:AVX2")
    elseif(MATH_OPTIMIZATION STREQUAL "avx512")
      set(COMPILER_FLAGS "/arch:AVX512")
    else()
      set(COMPILER_FLAGS "")
    endif()
  endif()

  set(COMPILER_FLAGS "${COMPILER_FLAGS} /fp:fast /MP /EHsc")
  if (CMAKE_BUILD_TYPE STREQUAL "Debug")
    set(COMPILER_FLAGS "${COMPILER_FLAGS} /W3 /D_SILENCE_NONFLOATING_COMPLEX_DEPRECATION_WARNING")
  endif()
  if (USE_WARNINGS_AS_ERROR)
    set(COMPILER_FLAGS "${COMPILER_FLAGS} /WX")
  endif()
else()
  set(COMPILER_FLAGS "-ffast-math")

  find_package(SSE REQUIRED)
  foreach(_sse SSE SSE2 SSE3 SSSE3 SSE4_1 SSE4_2 AVX AVX2)
    if(${${_sse}_FOUND})
      # enable SSE versions up to 4.1 by default, if available
      if(NOT ${_sse} MATCHES "AVX" AND NOT ${_sse} STREQUAL "SSE4_2")
        option(ENABLE_${_sse} "Enable ${_sse}" ON)
      else()
        option(ENABLE_${_sse} "Enable ${_sse}" OFF)
      endif()
    endif()
    if(ENABLE_${_sse})
      set(HAVE_${_sse} TRUE CACHE STRING "${_sse} enabled")
      list(APPEND ARCH_DEFINES -DHAVE_${_sse}=1)
    endif()
  endforeach()

  if(CMAKE_SYSTEM_PROCESSOR STREQUAL i386)
    set(TARGET_CPU "x86")
    set(COMPILER_FLAGS "${COMPILER_FLAGS} -msse")
  elseif(CMAKE_SYSTEM_PROCESSOR STREQUAL x86_64)
    set(TARGET_CPU "x64")
    if(AVX2_FOUND)
      set(MATH_SUPPORT "avx2")
    elseif(AVX_FOUND)
      set(MATH_SUPPORT "avx")
    elseif(SSE4_2_FOUND)
      set(MATH_SUPPORT "sse4.2")
    elseif(SSE4_1_FOUND)
      set(MATH_SUPPORT "sse4.1")
    elseif(SSSE3_FOUND)
      set(MATH_SUPPORT "ssse3")
    elseif(SSE3_FOUND)
      set(MATH_SUPPORT "sse3")
    elseif(SSE2_FOUND)
      set(MATH_SUPPORT "sse2")
    elseif(SSE_FOUND)
      set(MATH_SUPPORT "msse")
    endif()

    if(MATH_SUPPORT)
      set(MATH_OPTIMIZATION ${MATH_SUPPORT} CACHE STRING "Select performance optimization")
      set(COMPILER_FLAGS "${COMPILER_FLAGS} -m${MATH_OPTIMIZATION}")
    endif()

  elseif(CMAKE_SYSTEM_PROCESSOR STREQUAL arm1176jzf-s)
    set(TARGET_CPU "ARM")
    set(COMPILER_FLAGS "${COMPILER_FLAGS} -mcpu=arm1176jzf-s -mtune=arm1176jzf-s -mfloat-abi=hard -mfpu=vfp")
  elseif(CMAKE_SYSTEM_PROCESSOR MATCHES cortex-a7)
    set(TARGET_CPU "ARM")
    set(COMPILER_FLAGS "${COMPILER_FLAGS} -fPIC -mcpu=cortex-a7")
  elseif(CMAKE_SYSTEM_PROCESSOR MATCHES cortex-a53)
    set(TARGET_CPU "ARM")
    set(COMPILER_FLAGS "${COMPILER_FLAGS} -fPIC -mcpu=cortex-a53")
  elseif(CMAKE_SYSTEM_PROCESSOR STREQUAL arm64)
    set(TARGET_CPU "ARM64")
  else()
    message(SEND_ERROR "Unknown CPU: ${CMAKE_SYSTEM_PROCESSOR}")
  endif()

  if(NOT TARGET_CPU STREQUAL "ARM64")
    set(COMPILER_FLAGS "${COMPILER_FLAGS} -march=native")
  endif()
  if(CMAKE_BUILD_TYPE STREQUAL "Debug")
    set(COMPILER_FLAGS "${COMPILER_FLAGS} -Wall -Wextra")
  endif()
  if(USE_WARNINGS_AS_ERROR)
    set(COMPILER_FLAGS "${COMPILER_FLAGS} -Werror")
  endif()
  if(USE_NO_UNUSED_PARAMETER)
    set(COMPILER_FLAGS "${COMPILER_FLAGS} -Wno-unused-function -Wno-unused-parameter")
  endif()

  unset(MATH_SUPPORT)
endif()

set(CMAKE_C_FLAGS ${COMPILER_FLAGS})
set(CMAKE_CXX_FLAGS ${COMPILER_FLAGS})
